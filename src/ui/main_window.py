"""
Main window cho Google Maps Scraper application
"""

from PyQt5.QtWidgets import (
    QMainWindow, QTabWidget, QVBoxLayout, QHBoxLayout, 
    QWidget, QMenuBar, QToolBar, QStatusBar, QAction,
    QMessageBox, QProgressBar, QLabel
)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QIcon, QKeySequence

from .search_tab import SearchTab
from .filters_tab import FiltersTab
from .details_tab import DetailsTab
from .addons_tab import AddonsTab
from .results_tab import ResultsTab
from .settings_dialog import SettingsDialog

from ..api.auth import AuthManager
from ..api.apify_client import ApifyClient
from ..config import APP_NAME, WINDOW_WIDTH, WINDOW_HEIGHT, MIN_WINDOW_WIDTH, MIN_WINDOW_HEIGHT
from ..utils.logger import get_logger

logger = get_logger(__name__)


class MainWindow(QMainWindow):
    """Main window c·ªßa ·ª©ng d·ª•ng"""
    
    def __init__(self):
        super().__init__()
        
        # Initialize components
        self.auth_manager = AuthManager()
        self.apify_client = ApifyClient(self.auth_manager)
        
        # Initialize UI
        self.init_ui()
        self.setup_connections()
        self.update_status()
        
        logger.info("Main window initialized")
    
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán"""
        self.setWindowTitle(f"{APP_NAME} - Thu th·∫≠p d·ªØ li·ªáu Google Maps")
        self.setMinimumSize(MIN_WINDOW_WIDTH, MIN_WINDOW_HEIGHT)
        self.resize(WINDOW_WIDTH, WINDOW_HEIGHT)
        
        # Set window icon
        self.setWindowIcon(QIcon(":/icons/app_icon.png"))
        
        # Create central widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Create layout
        layout = QVBoxLayout(central_widget)
        
        # Create tab widget
        self.tab_widget = QTabWidget()
        layout.addWidget(self.tab_widget)
        
        # Create tabs
        self.search_tab = SearchTab()
        self.filters_tab = FiltersTab()
        self.details_tab = DetailsTab()
        self.addons_tab = AddonsTab()
        self.results_tab = ResultsTab()
        
        # Add tabs to tab widget
        self.tab_widget.addTab(self.search_tab, "üîç T√¨m ki·∫øm c∆° b·∫£n")
        self.tab_widget.addTab(self.filters_tab, "üéØ B·ªô l·ªçc n√¢ng cao")
        self.tab_widget.addTab(self.details_tab, "üìã Thu th·∫≠p chi ti·∫øt")
        self.tab_widget.addTab(self.addons_tab, "‚≠ê Add-ons Premium")
        self.tab_widget.addTab(self.results_tab, "üìä K·∫øt qu·∫£ & Xu·∫•t d·ªØ li·ªáu")
        
        # Create menu bar
        self.create_menu_bar()
        
        # Create tool bar
        self.create_tool_bar()
        
        # Create status bar
        self.create_status_bar()
    
    def create_menu_bar(self):
        """T·∫°o menu bar"""
        menubar = self.menuBar()
        
        # File menu
        file_menu = menubar.addMenu("&File")
        
        # New search action
        new_action = QAction("&T√¨m ki·∫øm m·ªõi", self)
        new_action.setShortcut(QKeySequence.New)
        new_action.setStatusTip("B·∫Øt ƒë·∫ßu t√¨m ki·∫øm m·ªõi")
        new_action.triggered.connect(self.new_search)
        file_menu.addAction(new_action)
        
        file_menu.addSeparator()
        
        # Save configuration action
        save_config_action = QAction("&L∆∞u c·∫•u h√¨nh", self)
        save_config_action.setShortcut(QKeySequence.Save)
        save_config_action.setStatusTip("L∆∞u c·∫•u h√¨nh t√¨m ki·∫øm")
        save_config_action.triggered.connect(self.save_configuration)
        file_menu.addAction(save_config_action)
        
        # Load configuration action
        load_config_action = QAction("&T·∫£i c·∫•u h√¨nh", self)
        load_config_action.setShortcut(QKeySequence.Open)
        load_config_action.setStatusTip("T·∫£i c·∫•u h√¨nh t√¨m ki·∫øm")
        load_config_action.triggered.connect(self.load_configuration)
        file_menu.addAction(load_config_action)
        
        file_menu.addSeparator()
        
        # Exit action
        exit_action = QAction("&Tho√°t", self)
        exit_action.setShortcut(QKeySequence.Quit)
        exit_action.setStatusTip("Tho√°t ·ª©ng d·ª•ng")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # Tools menu
        tools_menu = menubar.addMenu("&Tools")
        
        # Settings action
        settings_action = QAction("&C√†i ƒë·∫∑t", self)
        settings_action.setShortcut("Ctrl+,")
        settings_action.setStatusTip("M·ªü c√†i ƒë·∫∑t ·ª©ng d·ª•ng")
        settings_action.triggered.connect(self.show_settings)
        tools_menu.addAction(settings_action)
        
        # Help menu
        help_menu = menubar.addMenu("&Help")
        
        # About action
        about_action = QAction("&Gi·ªõi thi·ªáu", self)
        about_action.setStatusTip("Th√¥ng tin v·ªÅ ·ª©ng d·ª•ng")
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def create_tool_bar(self):
        """T·∫°o tool bar"""
        toolbar = self.addToolBar("Main")
        toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        
        # New search action
        new_action = QAction("üÜï T√¨m ki·∫øm m·ªõi", self)
        new_action.setStatusTip("B·∫Øt ƒë·∫ßu t√¨m ki·∫øm m·ªõi")
        new_action.triggered.connect(self.new_search)
        toolbar.addAction(new_action)
        
        toolbar.addSeparator()
        
        # Start scraping action
        self.start_action = QAction("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu thu th·∫≠p", self)
        self.start_action.setStatusTip("B·∫Øt ƒë·∫ßu thu th·∫≠p d·ªØ li·ªáu")
        self.start_action.triggered.connect(self.start_scraping)
        toolbar.addAction(self.start_action)
        
        # Stop scraping action
        self.stop_action = QAction("‚èπÔ∏è D·ª´ng", self)
        self.stop_action.setStatusTip("D·ª´ng thu th·∫≠p d·ªØ li·ªáu")
        self.stop_action.triggered.connect(self.stop_scraping)
        self.stop_action.setEnabled(False)
        toolbar.addAction(self.stop_action)
        
        toolbar.addSeparator()
        
        # Export action
        export_action = QAction("üì§ Xu·∫•t d·ªØ li·ªáu", self)
        export_action.setStatusTip("Xu·∫•t k·∫øt qu·∫£ ra file")
        export_action.triggered.connect(self.export_data)
        toolbar.addAction(export_action)
        
        toolbar.addSeparator()
        
        # Settings action
        settings_action = QAction("‚öôÔ∏è C√†i ƒë·∫∑t", self)
        settings_action.setStatusTip("M·ªü c√†i ƒë·∫∑t")
        settings_action.triggered.connect(self.show_settings)
        toolbar.addAction(settings_action)
    
    def create_status_bar(self):
        """T·∫°o status bar"""
        self.status_bar = self.statusBar()
        
        # API status label
        self.api_status_label = QLabel("API: Ch∆∞a k·∫øt n·ªëi")
        self.status_bar.addWidget(self.api_status_label)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.status_bar.addPermanentWidget(self.progress_bar)
        
        # Status label
        self.status_label = QLabel("S·∫µn s√†ng")
        self.status_bar.addPermanentWidget(self.status_label)
    
    def setup_connections(self):
        """Setup signal connections"""
        # Connect tab changes
        self.tab_widget.currentChanged.connect(self.on_tab_changed)
        
        # Connect search tab signals
        self.search_tab.start_scraping_signal.connect(self.start_scraping)
        
        # Connect results tab signals
        self.results_tab.export_signal.connect(self.export_data)
    
    def on_tab_changed(self, index):
        """X·ª≠ l√Ω khi chuy·ªÉn tab"""
        tab_names = [
            "T√¨m ki·∫øm c∆° b·∫£n",
            "B·ªô l·ªçc n√¢ng cao", 
            "Thu th·∫≠p chi ti·∫øt",
            "Add-ons Premium",
            "K·∫øt qu·∫£ & Xu·∫•t d·ªØ li·ªáu"
        ]
        
        if 0 <= index < len(tab_names):
            self.status_label.setText(f"Tab: {tab_names[index]}")
    
    def new_search(self):
        """B·∫Øt ƒë·∫ßu t√¨m ki·∫øm m·ªõi"""
        # Reset all tabs
        self.search_tab.reset_form()
        self.filters_tab.reset_form()
        self.details_tab.reset_form()
        self.addons_tab.reset_form()
        self.results_tab.clear_results()
        
        # Switch to search tab
        self.tab_widget.setCurrentIndex(0)
        
        self.status_label.setText("T√¨m ki·∫øm m·ªõi")
        logger.info("New search started")
    
    def save_configuration(self):
        """L∆∞u c·∫•u h√¨nh"""
        # TODO: Implement save configuration
        QMessageBox.information(self, "L∆∞u c·∫•u h√¨nh", "T√≠nh nƒÉng l∆∞u c·∫•u h√¨nh s·∫Ω ƒë∆∞·ª£c th√™m trong phi√™n b·∫£n ti·∫øp theo.")
    
    def load_configuration(self):
        """T·∫£i c·∫•u h√¨nh"""
        # TODO: Implement load configuration
        QMessageBox.information(self, "T·∫£i c·∫•u h√¨nh", "T√≠nh nƒÉng t·∫£i c·∫•u h√¨nh s·∫Ω ƒë∆∞·ª£c th√™m trong phi√™n b·∫£n ti·∫øp theo.")
    
    def start_scraping(self):
        """B·∫Øt ƒë·∫ßu thu th·∫≠p d·ªØ li·ªáu"""
        try:
            # Validate API token
            if not self.auth_manager.has_token():
                QMessageBox.warning(
                    self,
                    "Thi·∫øu API Token",
                    "Vui l√≤ng c·∫•u h√¨nh API token trong Settings tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu thu th·∫≠p d·ªØ li·ªáu."
                )
                self.show_settings()
                return
            
            # Get search input from tabs
            search_input = self.get_search_input()
            
            # Validate search input
            if not search_input.search_strings_array:
                QMessageBox.warning(
                    self,
                    "Thi·∫øu th√¥ng tin",
                    "Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt t·ª´ kh√≥a t√¨m ki·∫øm."
                )
                self.tab_widget.setCurrentIndex(0)
                return
            
            if not search_input.location_query:
                QMessageBox.warning(
                    self,
                    "Thi·∫øu th√¥ng tin", 
                    "Vui l√≤ng nh·∫≠p ƒë·ªãa ƒëi·ªÉm t√¨m ki·∫øm."
                )
                self.tab_widget.setCurrentIndex(0)
                return
            
            # Switch to results tab
            self.tab_widget.setCurrentIndex(4)
            
            # Update UI state
            self.start_action.setEnabled(False)
            self.stop_action.setEnabled(True)
            self.progress_bar.setVisible(True)
            self.progress_bar.setRange(0, 0)  # Indeterminate progress
            self.status_label.setText("ƒêang thu th·∫≠p d·ªØ li·ªáu...")
            
            # Start scraping in background
            self.results_tab.start_scraping(search_input)
            
            logger.info("Scraping started")
            
        except Exception as e:
            logger.error(f"Failed to start scraping: {e}")
            QMessageBox.critical(
                self,
                "L·ªói",
                f"Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu thu th·∫≠p d·ªØ li·ªáu:\n{str(e)}"
            )
            self.reset_ui_state()
    
    def stop_scraping(self):
        """D·ª´ng thu th·∫≠p d·ªØ li·ªáu"""
        try:
            self.results_tab.stop_scraping()
            self.reset_ui_state()
            self.status_label.setText("ƒê√£ d·ª´ng thu th·∫≠p d·ªØ li·ªáu")
            logger.info("Scraping stopped")
            
        except Exception as e:
            logger.error(f"Failed to stop scraping: {e}")
            QMessageBox.critical(
                self,
                "L·ªói",
                f"Kh√¥ng th·ªÉ d·ª´ng thu th·∫≠p d·ªØ li·ªáu:\n{str(e)}"
            )
    
    def export_data(self):
        """Xu·∫•t d·ªØ li·ªáu"""
        try:
            self.results_tab.export_data()
            
        except Exception as e:
            logger.error(f"Failed to export data: {e}")
            QMessageBox.critical(
                self,
                "L·ªói",
                f"Kh√¥ng th·ªÉ xu·∫•t d·ªØ li·ªáu:\n{str(e)}"
            )
    
    def show_settings(self):
        """Hi·ªÉn th·ªã dialog c√†i ƒë·∫∑t"""
        dialog = SettingsDialog(self.auth_manager, self)
        if dialog.exec_() == SettingsDialog.Accepted:
            self.update_status()
            logger.info("Settings updated")
    
    def show_about(self):
        """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ·ª©ng d·ª•ng"""
        QMessageBox.about(
            self,
            f"Gi·ªõi thi·ªáu {APP_NAME}",
            f"""
            <h3>{APP_NAME}</h3>
            <p>Phi√™n b·∫£n: {APP_VERSION}</p>
            <p>·ª®ng d·ª•ng desktop ƒë·ªÉ thu th·∫≠p d·ªØ li·ªáu t·ª´ Google Maps th√¥ng qua Apify API.</p>
            <p><b>T√≠nh nƒÉng ch√≠nh:</b></p>
            <ul>
            <li>Thu th·∫≠p d·ªØ li·ªáu t·ª´ Google Maps</li>
            <li>B·ªô l·ªçc n√¢ng cao</li>
            <li>Thu th·∫≠p chi ti·∫øt (reviews, h√¨nh ·∫£nh)</li>
            <li>Add-ons premium</li>
            <li>Xu·∫•t d·ªØ li·ªáu ra Excel, CSV, JSON</li>
            </ul>
            <p><b>Ph√°t tri·ªÉn b·ªüi:</b> Google Maps Scraper Team</p>
            <p><b>Website:</b> <a href="https://apify.com/compass/crawler-google-places">Apify Google Maps Scraper</a></p>
            """
        )
    
    def get_search_input(self):
        """L·∫•y search input t·ª´ c√°c tabs"""
        from ..api.models import SearchInput
        
        search_input = SearchInput()
        
        # Get data from search tab
        search_data = self.search_tab.get_search_data()
        search_input.search_strings_array = search_data.get("search_strings", [])
        search_input.location_query = search_data.get("location", "")
        search_input.max_crawled_places_per_search = search_data.get("max_places")
        search_input.language = search_data.get("language", "en")
        
        # Get data from filters tab
        filters_data = self.filters_tab.get_filters_data()
        search_input.category_filter_words = filters_data.get("categories", [])
        search_input.search_matching = filters_data.get("search_matching", "all")
        search_input.place_minimum_stars = filters_data.get("minimum_stars")
        search_input.website = filters_data.get("website", "allPlaces")
        search_input.skip_closed_places = filters_data.get("skip_closed", False)
        
        # Get data from details tab
        details_data = self.details_tab.get_details_data()
        search_input.scrape_place_detail_page = details_data.get("scrape_details", False)
        search_input.scrape_table_reservation_provider = details_data.get("reservation_data", False)
        search_input.include_web_results = details_data.get("web_results", False)
        search_input.scrape_directories = details_data.get("directories", False)
        search_input.max_questions = details_data.get("max_questions", 0)
        search_input.max_reviews = details_data.get("max_reviews", 0)
        search_input.reviews_start_date = details_data.get("reviews_start_date")
        search_input.reviews_sort = details_data.get("reviews_sort", "newest")
        search_input.max_images = details_data.get("max_images", 0)
        
        # Get data from addons tab
        addons_data = self.addons_tab.get_addons_data()
        search_input.scrape_contacts = addons_data.get("scrape_contacts", False)
        search_input.maximum_leads_enrichment_records = addons_data.get("max_leads", 0)
        search_input.leads_enrichment_departments = addons_data.get("leads_departments", [])
        
        return search_input
    
    def update_status(self):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i"""
        if self.auth_manager.has_token():
            self.api_status_label.setText("API: ƒê√£ k·∫øt n·ªëi")
            self.api_status_label.setStyleSheet("color: green;")
        else:
            self.api_status_label.setText("API: Ch∆∞a k·∫øt n·ªëi")
            self.api_status_label.setStyleSheet("color: red;")
    
    def reset_ui_state(self):
        """Reset UI state"""
        self.start_action.setEnabled(True)
        self.stop_action.setEnabled(False)
        self.progress_bar.setVisible(False)
        self.status_label.setText("S·∫µn s√†ng")
    
    def closeEvent(self, event):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        try:
            # Stop any running scraping
            if self.stop_action.isEnabled():
                self.stop_scraping()
            
            logger.info("Application closing")
            event.accept()
            
        except Exception as e:
            logger.error(f"Error during close: {e}")
            event.accept()

"""
Add-ons tab - Tab add-ons premium
"""

from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QFormLayout,
    QCheckBox, QSpinBox, QListWidget, QListWidgetItem,
    QGroupBox, QLabel, QScrollArea, QFrame, QPushButton
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont

from ..utils.constants import LEADS_DEPARTMENTS
from ..utils.helpers import calculate_estimated_cost
from ..utils.logger import get_logger

logger = get_logger(__name__)


class AddonsTab(QWidget):
    """Tab add-ons premium"""
    
    def __init__(self):
        super().__init__()
        self.init_ui()
        self.setup_connections()
        self.load_departments()
    
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán"""
        layout = QVBoxLayout(self)
        layout.setSpacing(20)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Title
        title_label = QLabel("‚≠ê Add-ons Premium")
        title_font = QFont()
        title_font.setPointSize(16)
        title_font.setBold(True)
        title_label.setFont(title_font)
        layout.addWidget(title_label)
        
        # Description
        desc_label = QLabel(
            "C√°c t√≠nh nƒÉng premium ƒë·ªÉ thu th·∫≠p th√¥ng tin li√™n h·ªá v√† business leads. "
            "C√°c t√≠nh nƒÉng n√†y c√≥ ph√≠ b·ªï sung nh∆∞ng cung c·∫•p d·ªØ li·ªáu gi√° tr·ªã cao cho "
            "lead generation v√† sales prospecting."
        )
        desc_label.setWordWrap(True)
        desc_label.setStyleSheet("color: #666; margin-bottom: 10px;")
        layout.addWidget(desc_label)
        
        # Warning banner
        warning_label = QLabel(
            "üí∞ C·∫¢NH B√ÅO: C√°c t√≠nh nƒÉng n√†y c√≥ ph√≠ b·ªï sung. Vui l√≤ng ki·ªÉm tra b·∫£ng gi√° tr∆∞·ªõc khi s·ª≠ d·ª•ng."
        )
        warning_label.setWordWrap(True)
        warning_label.setStyleSheet("""
            color: #d63384; 
            background-color: #f8d7da; 
            padding: 15px; 
            border-radius: 8px; 
            border: 1px solid #f5c6cb;
            font-weight: bold;
        """)
        layout.addWidget(warning_label)
        
        # Create scroll area
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        
        addons_widget = QWidget()
        addons_layout = QVBoxLayout(addons_widget)
        addons_layout.setSpacing(20)
        
        # Company contacts group
        contacts_group = QGroupBox("üìß Thu th·∫≠p th√¥ng tin li√™n h·ªá c√¥ng ty")
        contacts_layout = QVBoxLayout(contacts_group)
        
        # Main checkbox
        self.scrape_contacts_cb = QCheckBox("B·∫≠t thu th·∫≠p th√¥ng tin li√™n h·ªá")
        self.scrape_contacts_cb.setToolTip(
            "Thu th·∫≠p email c√¥ng ty v√† social media profiles t·ª´ website c·ªßa ƒë·ªãa ƒëi·ªÉm. "
            "Gi√°: $2/1,000 ƒë·ªãa ƒëi·ªÉm c√≥ website."
        )
        contacts_layout.addWidget(self.scrape_contacts_cb)
        
        # Description
        contacts_desc = QLabel(
            "T√≠nh nƒÉng n√†y s·∫Ω:\n"
            "‚Ä¢ T√¨m v√† thu th·∫≠p email c√¥ng ty t·ª´ website\n"
            "‚Ä¢ Thu th·∫≠p social media profiles (Facebook, LinkedIn, Twitter, etc.)\n"
            "‚Ä¢ Ch·ªâ √°p d·ª•ng cho c√°c ƒë·ªãa ƒëi·ªÉm c√≥ website\n"
            "‚Ä¢ Lo·∫°i tr·ª´ c√°c chu·ªói l·ªõn (McDonald's, Starbucks, etc.)"
        )
        contacts_desc.setStyleSheet("color: #666; font-size: 12px; margin: 10px 0;")
        contacts_layout.addWidget(contacts_desc)
        
        addons_layout.addWidget(contacts_group)
        
        # Business leads group
        leads_group = QGroupBox("üë• Thu th·∫≠p th√¥ng tin business leads")
        leads_layout = QVBoxLayout(leads_group)
        
        # Max leads per place
        leads_form_layout = QFormLayout()
        
        self.max_leads_spin = QSpinBox()
        self.max_leads_spin.setRange(0, 100)
        self.max_leads_spin.setValue(0)
        self.max_leads_spin.setSpecialValueText("T·∫Øt")
        self.max_leads_spin.setToolTip(
            "S·ªë leads t·ªëi ƒëa m·ªói ƒë·ªãa ƒëi·ªÉm. 0 = t·∫Øt, 1-100 = s·ªë l∆∞·ª£ng. "
            "Gi√°: $5/1,000 leads."
        )
        leads_form_layout.addRow("S·ªë leads t·ªëi ƒëa m·ªói ƒë·ªãa ƒëi·ªÉm:", self.max_leads_spin)
        
        leads_layout.addLayout(leads_form_layout)
        
        # Departments filter
        departments_label = QLabel("L·ªçc theo ph√≤ng ban:")
        leads_layout.addWidget(departments_label)
        
        self.departments_list = QListWidget()
        self.departments_list.setSelectionMode(QListWidget.MultiSelection)
        self.departments_list.setMaximumHeight(150)
        leads_layout.addWidget(self.departments_list)
        
        # Select all/none buttons
        dept_buttons_layout = QHBoxLayout()
        self.select_all_depts_btn = QPushButton("Ch·ªçn t·∫•t c·∫£")
        self.select_none_depts_btn = QPushButton("B·ªè ch·ªçn t·∫•t c·∫£")
        
        dept_buttons_layout.addWidget(self.select_all_depts_btn)
        dept_buttons_layout.addWidget(self.select_none_depts_btn)
        dept_buttons_layout.addStretch()
        
        leads_layout.addLayout(dept_buttons_layout)
        
        # Leads description
        leads_desc = QLabel(
            "T√≠nh nƒÉng n√†y s·∫Ω thu th·∫≠p:\n"
            "‚Ä¢ T√™n ƒë·∫ßy ƒë·ªß c·ªßa nh√¢n vi√™n\n"
            "‚Ä¢ Email c√¥ng vi·ªác\n"
            "‚Ä¢ S·ªë ƒëi·ªán tho·∫°i\n"
            "‚Ä¢ Ch·ª©c v·ª•/Job title\n"
            "‚Ä¢ LinkedIn profile\n"
            "‚Ä¢ Th√¥ng tin c√¥ng ty (ng√†nh, s·ªë nh√¢n vi√™n, etc.)"
        )
        leads_desc.setStyleSheet("color: #666; font-size: 12px; margin: 10px 0;")
        leads_layout.addWidget(leads_desc)
        
        # GDPR warning
        gdpr_warning = QLabel(
            "‚ö†Ô∏è C·∫¢NH B√ÅO GDPR: Th√¥ng tin n√†y ch·ª©a d·ªØ li·ªáu c√° nh√¢n. "
            "Ch·ªâ s·ª≠ d·ª•ng khi c√≥ l√Ω do ch√≠nh ƒë√°ng v√† tu√¢n th·ªß c√°c quy ƒë·ªãnh v·ªÅ b·∫£o v·ªá d·ªØ li·ªáu."
        )
        gdpr_warning.setWordWrap(True)
        gdpr_warning.setStyleSheet("""
            color: #dc3545; 
            background-color: #f8d7da; 
            padding: 10px; 
            border-radius: 5px; 
            border: 1px solid #f5c6cb;
            font-size: 12px;
        """)
        leads_layout.addWidget(gdpr_warning)
        
        addons_layout.addWidget(leads_group)
        
        # Cost estimation group
        cost_group = QGroupBox("üí∞ ∆Ø·ªõc t√≠nh chi ph√≠")
        cost_layout = QVBoxLayout(cost_group)
        
        self.cost_label = QLabel("Chi ph√≠ ∆∞·ªõc t√≠nh: $0.00")
        self.cost_label.setStyleSheet("""
            font-size: 16px; 
            font-weight: bold; 
            color: #28a745; 
            padding: 10px; 
            background-color: #d4edda; 
            border-radius: 5px;
        """)
        cost_layout.addWidget(self.cost_label)
        
        # Update cost button
        self.update_cost_btn = QPushButton("üîÑ C·∫≠p nh·∫≠t chi ph√≠")
        self.update_cost_btn.setToolTip("C·∫≠p nh·∫≠t chi ph√≠ d·ª±a tr√™n c·∫•u h√¨nh hi·ªán t·∫°i")
        cost_layout.addWidget(self.update_cost_btn)
        
        addons_layout.addWidget(cost_group)
        
        # Add stretch
        addons_layout.addStretch()
        
        # Set scroll area widget
        scroll_area.setWidget(addons_widget)
        layout.addWidget(scroll_area)
    
    def setup_connections(self):
        """Setup signal connections"""
        self.scrape_contacts_cb.toggled.connect(self.update_cost_estimation)
        self.max_leads_spin.valueChanged.connect(self.update_cost_estimation)
        self.select_all_depts_btn.clicked.connect(self.select_all_departments)
        self.select_none_depts_btn.clicked.connect(self.select_none_departments)
        self.update_cost_btn.clicked.connect(self.update_cost_estimation)
    
    def load_departments(self):
        """Load departments list"""
        for dept in LEADS_DEPARTMENTS:
            item = QListWidgetItem(dept)
            self.departments_list.addItem(item)
    
    def select_all_departments(self):
        """Select all departments"""
        for i in range(self.departments_list.count()):
            self.departments_list.item(i).setSelected(True)
    
    def select_none_departments(self):
        """Select none departments"""
        for i in range(self.departments_list.count()):
            self.departments_list.item(i).setSelected(False)
    
    def update_cost_estimation(self):
        """Update cost estimation"""
        try:
            # Get current configuration (simplified)
            max_places = 100  # Default assumption
            filters_count = 0  # Will be calculated from other tabs
            scrape_details = False  # Will be calculated from details tab
            scrape_contacts = self.scrape_contacts_cb.isChecked()
            max_leads = self.max_leads_spin.value()
            max_reviews = 0  # Will be calculated from details tab
            max_images = 0  # Will be calculated from details tab
            
            cost = calculate_estimated_cost(
                max_places=max_places,
                filters_count=filters_count,
                scrape_details=scrape_details,
                scrape_contacts=scrape_contacts,
                max_leads=max_leads,
                max_reviews=max_reviews,
                max_images=max_images
            )
            
            self.cost_label.setText(f"Chi ph√≠ ∆∞·ªõc t√≠nh: ${cost:.2f}")
            
        except Exception as e:
            logger.error(f"Failed to update cost estimation: {e}")
            self.cost_label.setText("Chi ph√≠ ∆∞·ªõc t√≠nh: L·ªói t√≠nh to√°n")
    
    def get_addons_data(self):
        """L·∫•y d·ªØ li·ªáu add-ons"""
        # Get selected departments
        selected_departments = []
        for i in range(self.departments_list.count()):
            item = self.departments_list.item(i)
            if item.isSelected():
                selected_departments.append(item.text())
        
        return {
            "scrape_contacts": self.scrape_contacts_cb.isChecked(),
            "max_leads": self.max_leads_spin.value(),
            "leads_departments": selected_departments
        }
    
    def reset_form(self):
        """Reset form v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
        self.scrape_contacts_cb.setChecked(False)
        self.max_leads_spin.setValue(0)
        
        # Clear department selections
        for i in range(self.departments_list.count()):
            self.departments_list.item(i).setSelected(False)
        
        # Update cost estimation
        self.update_cost_estimation()

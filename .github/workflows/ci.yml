name: CI - Test and Lint

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8
    
    - name: Run linter
      env:
        PYTHONIOENCODING: "utf-8"
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Run tests with coverage
      env:
        PYTHONIOENCODING: "utf-8"
      run: |
        python run_tests.py --type unit --verbose
    
    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      continue-on-error: true

  build-test:
    name: Test Build Process
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test build executable (without Inno Setup)
      env:
        PYTHONIOENCODING: "utf-8"
      run: |
        python build.py --skip-installer --skip-tests
    
    - name: Verify executable exists
      run: |
        if (!(Test-Path "dist/GoogleMapsScraper.exe")) {
          Write-Error "Executable not found!"
          exit 1
        }
        Write-Host "Executable built successfully!"
      shell: pwsh
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-build-executable
        path: dist/GoogleMapsScraper.exe
        retention-days: 7
